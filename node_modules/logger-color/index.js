var colors = require('colors');
var dateFormat = require('dateformat');
var logger = module.exports || {};
var config = {
    time: false,  // 是否显示时间标记
    method: false, // 是否显示函数内容
    level: 20,    // 输出级别
    color: 'white', // 默认颜色
    line: 'white', // 单行输出时颜色
    levels: {
        'log': 0,
        'info': 10,
        'debug': 20,
        'notice': 30,
        'warning': 40,
        'error': 100
    },
    colors: {
        'log': 'white',
        'info': 'cyan',
        'debug': 'blue',
        'notice': 'magenta',
        'warning': 'yellow',
        'error': 'red'
    }
};


function LoggerError(msg) {
    console.log(colors.red('Logger-Color: ', msg));
}
function Logger() {
    if (arguments.length < 1) {
        return;
    }
    var color, level;
    if (this.color) {
        color = this.color;
    } else if (this.method) {
        if (typeof config.levels[this.method] == 'undefined') {
            LoggerError('Unknow Method "' + this.method + '');
            return;
        }
        level = config.levels[this.method], color = config.colors[this.method] || config.color;
        if (level < config.level) {
            return;
        }
    }
    if (!colors[color]) {
        LoggerError('Unknow Color "' + color + '');
        return;
    }

    var args = Array.prototype.slice.call(arguments, 0);
    if (config.time) {
        // 是否输出时间
        args.unshift(dateFormat(Date.now(), 'hh:MM:ss : '));
    }
    if (this.method && config.method) {
        args.unshift((this.method + '').toUpperCase());
    }

    if (process.stdout.write) {
        if (this.oneline !== true) {
            args.push('\n');
        }
        process.stdout.write(colors[color].apply(colors, args));
    }
    else {
        console.log(colors[color].apply(colors, args));
    }
}


logger.setLevel = function (key, val) {
    if (typeof val == 'undefined') {
        logger.level = key;
    }
    else if (typeof config.levels[key] !== 'undefined') {
        config.levels[key] = parseInt(val);
    } else {
        config.levels[key] = parseInt(val);
        // 增加方法
        logger[key] = Logger.apply({method: key});
    }
    return logger;
};
logger.setColor = function (key, val) {
    if (typeof val == 'undefined') {
        logger.color = val;
    } else {
        config.colors[key] = val;
        if (!logger[key]) {
            logger.setLevel(key, 0);
        }
    }
    return logger;
};

Object.defineProperties(logger, {
    time: {
        get: function () {
            return config.time;
        },
        set: function (val) {
            config.time = !!val;
        },
        enumerable: true,
        configurable: true
    },
    level: {
        get: function () {
            return config.level;
        },
        set: function (val) {
            if (typeof config.levels[val] !== 'undefined') {
                config.level = config.levels[val];
            } else {
                val = parseInt(val);
                if (!isNaN(val)) {
                    config.level = val;
                }
            }
        },
        enumerable: true,
        configurable: true
    },
    line: {
        get: function () {
            return Logger.bind({color: config.line, oneline: true});
        },
        set: function (val) {
            if (typeof val == 'string') {
                config.line = val;
            }
        },
        enumerable: true,
        configurable: true
    }
});

for (var method in config.levels) {
    logger[method] = Logger.bind({method: method});
}

for (var color in colors) {
    logger[color] = Logger.bind({color: color});
}

// 清除使用logger.line输出的内容（注意不要带换行符）
logger.clearLine = function () {
    process.stdout.clearLine();
    process.stdout.cursorTo(0);
};
// 清理屏幕
logger.clearScreen = function () {
    var rows = process.stdout.rows;
    var arr = [];
    arr.length = rows + 1;
    console.log(arr.join('\n'));
};

logger.lineEnd = function () {
    process.stdout.write('\n');
};

module.exports = logger;