'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var ctxHandles = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(ctx, handles, index) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            index = index || 0;

            if (!(index >= handles.length)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt('return');

          case 3:
            _context.next = 5;
            return ctxHandle(ctx, handles[index]);

          case 5:
            _context.next = 7;
            return ctxHandles(ctx, handles, index + 1);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function ctxHandles(_x, _x2, _x3) {
    return ref.apply(this, arguments);
  };
}();

var ctxHandle = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(ctx, handle) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!_.isArray(handle)) {
              _context2.next = 5;
              break;
            }

            _context2.next = 3;
            return ctxHandles(ctx, handle);

          case 3:
            _context2.next = 13;
            break;

          case 5:
            if (!_.isFunction(handle)) {
              _context2.next = 10;
              break;
            }

            _context2.next = 8;
            return handle(ctx);

          case 8:
            _context2.next = 13;
            break;

          case 10:
            if (!_.isPlainObject(handle)) {
              _context2.next = 13;
              break;
            }

            _context2.next = 13;
            return ctxChangeByPlain(ctx, handle);

          case 13:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return function ctxHandle(_x4, _x5) {
    return ref.apply(this, arguments);
  };
}();

// 根据plainObject， 修改ctx的属性


var RunRuleHandle = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(ctx, list, nowIndex) {
    var r;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            nowIndex = nowIndex || 0;

            if (!(nowIndex >= list.length)) {
              _context4.next = 3;
              break;
            }

            return _context4.abrupt('return', _promise2.default.resolve());

          case 3:
            r = list[nowIndex];

            if (!isCtxMatchRule(ctx, r.condition)) {
              _context4.next = 9;
              break;
            }

            ctx._matchs ? ctx._matchs.push(r.id) : ctx._matchs = [r.id];
            _context4.next = 8;
            return ctxHandle(ctx, r.handle).then(function () {
              return RunRuleHandle(ctx, list, nowIndex + 1);
            });

          case 8:
            return _context4.abrupt('return', _context4.sent);

          case 9:
            return _context4.abrupt('return', RunRuleHandle(ctx, list, nowIndex + 1));

          case 10:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return function RunRuleHandle(_x8, _x9, _x10) {
    return ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 匹配处理程序
 * */
require('babel-core/register');
require('babel-polyfill');
var uuid = require('uuid');

var _ = require('lodash');
var mixin = require('mixin-attr');
var rules = [];
/**
 * 增加匹配规则和回调
 * */
function add(condition, handle) {
  if (!condition) return;
  if (arguments.length === 1) {
    handle = condition;
    condition = /\*/g;
    rules.push({ condition: condition, handle: handle, id: uuid() });
  } else if (condition && handle) {
    rules.push({ condition: condition, handle: handle, id: uuid() });
  } else {
    throw new Error('Can not add match rule:', condition, handle);
  }
}

function adds(_rules) {
  if (_.isArray(_rules)) {
    _rules.forEach(function (r) {
      if (r && r.condition && r.handle) {
        r.id = r.id || uuid();
        rules.push(r);
      }
    });
  }
}
/**
 * 清空所有规则 todo:
 * */
function clean() {
  rules.splice(0, rules.length);
}

function ctxChangeByPlain(ctx, plainObject) {
  if (plainObject.attr && plainObject.value) {
    var p = {};
    p[plainObject.attr] = plainObject.value;
    plainObject = p;
  }
  for (var attr in plainObject) {
    var val = plainObject[attr];
    attr = (attr + '').trim().toLowerCase();
    switch (attr) {
      case 'url':
      case 'method':
        ctx.request[attr] = val;
        continue;
      case 'host':
      case 'hostname':
      case 'referer':
      case 'user-agent':
      case 'accept':
      case 'accept-encoding':
      case 'accept-language':
      case 'accept-control-expose-headers':
      case 'cache-control':
      case 'cookie':
        ctx.request.set(attr, val);
        continue;
      case 'body':
      case 'status':
        ctx.response[attr] = val;
        continue;
    }
    if (attr.indexOf('.') < 0) {
      if ((0, _typeof3.default)(ctx[attr]) === 'object') {
        // 当是对象时,不要直接赋值,不然会影响对象上原有的属性
        // console.log('mixin:', attr, val);
        mixin(ctx[attr], val);
        // console.log('result:', ctx[attr]);
      } else {
        ctx[attr] = val;
      }
      continue;
    }
    var attrs = attr.split('.');
    var start = attrs.shift();
    var end = attrs.join('.');
    var reset = {};
    reset[end] = val;
    if ((0, _typeof3.default)(ctx[start]) === 'object') {
      // console.log('mixin2:', start, reset);
      mixin(ctx[start], reset);
      // console.log('result:', ctx[start]);
    } else {
      ctx[start] = reset;
    }
  }
}

/**
 * 返回koa中间件
 */
function callback() {
  return function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(ctx, next) {
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;

              ctx.phase = 'request';
              _context3.next = 4;
              return RunRuleHandle(ctx, rules);

            case 4:
              _context3.next = 6;
              return next();

            case 6:
              ctx.phase = 'response';
              _context3.next = 9;
              return RunRuleHandle(ctx, rules);

            case 9:
              // console.log('ctx:', ctx);
              resetHeader(ctx);
              _context3.next = 16;
              break;

            case 12:
              _context3.prev = 12;
              _context3.t0 = _context3['catch'](0);

              console.log(_context3.t0);
              throw _context3.t0;

            case 16:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 12]]);
    }));
    return function (_x6, _x7) {
      return ref.apply(this, arguments);
    };
  }();
}

module.exports.getRules = function () {
  return rules;
};
module.exports.setRules = function (rules) {
  clean();
  adds(rules);
};
module.exports.callback = callback;
module.exports.add = add;
module.exports.match = add;
module.exports.clean = clean;
module.exports.adds = adds;
module.exports.matchs = adds;

function isCtxMatchRule(ctx, condition) {
  var phase = condition.phase || condition.attr === 'phase' && condition.value || 'request';
  if (_.isArray(condition)) {
    for (var i = 0; i < condition.length; i++) {
      condition.forEach(function (con) {
        if (con && con.phase) phase = con.phase;
        if (con && con.attr && con.attr === 'phase' && con.value) phase = con.value;
      });
      if (ctx.phase !== phase) return false;
      if (!isCtxMatchRule(ctx, condition[i])) {
        return false;
      }
    }
    return true;
  }
  if (ctx.phase !== phase) return false;
  if (typeof condition === 'string' || _.isRegExp(condition)) return TestOneRule(GetVal(ctx, 'url'), condition);
  if (typeof condition === 'function') return condition(ctx);
  if (condition.attr && condition.value) {
    if (condition.attr === 'phase') return true;
    if (!TestOneRule(GetVal(ctx, condition.attr), condition.value)) {
      return false;
    }
    return true;
  }
  for (var key in condition) {
    if (key === 'phase') continue;
    var c = condition[key];
    if (!TestOneRule(GetVal(ctx, key), c)) {
      return false;
    }
  }
  return true;
}

function GetVal(ctx, key) {
  switch (key) {
    case 'fullUrl':
      var request = ctx.request;
      if (request.url.indexOf('http') === 0) {
        return request.url;
      }
      return request.protocol + '://' + request.header.host + request.url;
    case 'url':
      return ctx.request.url;
    default:
      var val = ctx.request[key];
      if (typeof val === 'string') {
        return val.toLowerCase();
      }
      return ctx.get(key) || ctx[key];
  }
}
function TestOneRule(val, condition) {
  if (_.isFunction(condition)) {
    return condition(val);
  } else if (_.isRegExp(condition)) {
    return condition.test(val);
  } else if (_.isString(condition)) {
    return (val + '').indexOf(condition) >= 0;
  }
  return false;
}

// response的header需要重新设置
function resetHeader(ctx) {
  var response = ctx.response;
  var header = response.header;
  for (var attr in header) {
    ctx.set(attr, header[attr]);
  }
}